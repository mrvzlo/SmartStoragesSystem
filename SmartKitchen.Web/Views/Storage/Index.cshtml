@model List<SmartKitchen.Domain.DisplayModels.StorageDisplayModel>
@{
    ViewBag.Title = "My storages";
}
<div class="row justify-content-center">
    @foreach (var item in Model)
    {
        <div class="col-12 col-lg-6">
            @{
                var filename = item.Type.Id + ".png";
                var style = Html.Raw("style = 'background-color: #" + item.Type.Background + "'");
            }
            <div class="storage row justify-content-center mb-0" @style>
                <img class="rowicon" src="../Content/icons/@filename" />
                <a class="col title text-decoration-none text-dark" id="name_@item.Id" href="@Url.Action("View", "Storage", new {id = item.Id})">@item.Name</a>
                <img class="rowicon" src="~/Content/icons/edit.png" onclick="NamePickerJs.showNamePicker(@item.Id)" data-toggle="modal" data-target="#NamePickerModal" />
                <img class="rowicon" src="~/Content/icons/remove.svg" onclick="StorageIndexJs.remove('@item.Name', @item.Id)" />
            </div>
            <div class="row justify-content-center mx-3">
                <div class="col-4 h6 storage-footer alert-info">@item.CellCount<span class="d-none d-sm-inline"> total</span></div>
                @if (item.Expired > 0)
                {<div class="col-4 h6 storage-footer alert-danger">@item.Expired<span class="d-none d-sm-inline"> expired</span></div>}
                @if (item.Absent > 0)
                {<div class="col-4 h6 storage-footer alert-secondary">@item.Absent<span class="d-none d-sm-inline"> absent</span></div>}
            </div>
        </div>
    }
    <a class="col-12 col-lg-6 text-decoration-none text-light" href="@Url.Action("Create", "Storage")">
        <div class="storage bg-main row justify-content-between">
            <img class="navicon" src="~/Content/icons/add.png" alt="Add" />
            <div class="col title">New storage</div>
        </div>
    </a>
</div>
@Html.Partial("Pickers/_NamePicker")
@section scripts
{
    @Scripts.Render("~/js/storageIndex")
    @Scripts.Render("~/js/pickers")
    <script>
        $(function () {
            StorageIndexJs.initialize({removeUrl: '@Url.Action("Delete", "Storage")'});
            NamePickerJs.initialize({updateUrl: '@Url.Action("UpdateName","Storage")'});
        });
    </script>
}
