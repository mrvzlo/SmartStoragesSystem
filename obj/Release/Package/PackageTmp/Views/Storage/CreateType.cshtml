@model List<SmartKitchen.Models.StorageType>
@{
    ViewBag.Title = "Storage types";
}
<div class="row justify-content-center">
    <div class="col-12 col-lg-8">
        <div class="row justify-content-center">
            @foreach (var item in Model)
            {
                <div class="col-lg-3 col-4 px-1">
                    <div class="storage-small row justify-content-between px-2 py-1" style="background-color: #@item.Background" onclick='updateForm(@item.Id,"@item.Name","@item.Background");'>
                        @{ var filename = item.Id + ".png";}
                        <img class="rowicon" src="~/Content/images/@filename" />
                        @Html.Hidden("name_" + item.Id,item.Name)
                        <img class="rowicon" src="~/Content/images/remove.svg" onclick="remove(@item.Id)" />
                    </div>
                </div>
            }
            <div class="col-lg-3 col-4 px-1">
                <div class="storage-small row py-1" onclick='updateForm(0,"","FFFFFF");'><div class="col text-center">Clear</div></div>
            </div>
        </div>

        @using (Html.BeginForm("CreateType", "Storage", FormMethod.Post, new { @class = "storage justify-content-center mx-0", enctype = "multipart/form-data", id = "storage" }))
        {
            @Html.AntiForgeryToken()
            @Html.Hidden("Id", 0)
                <div class="row justify-content-center py-2">
                    <div class="col-md-2">Name</div>
                    <div class="col-md-10">@Html.Editor("Name")</div>
                    <div class="error col-12">@Html.ValidationMessage("Name")</div>
                </div>
                <div class="row justify-content-center py-2">
                    <div class="col-md-2">Icon</div>
                    <div class="col-md-10">
                        <div class="row m-0 p-0">
                            @Html.TextBox("Icon", "", new { type = "file", id = "upload", @class = "d-none" })
                            <span id="uploadBtn" class="btn-main btn py-0 col-6 text-nowrap font-weight-normal">Pick image</span>
                            @Html.TextBox("UploadStatus", "", new { @readonly = "readonly", @class = "col-6" })
                        </div>
                    </div>
                    <div class="error col-12">@Html.ValidationMessage("Icon")</div>
                </div>
                <div class="row justify-content-center py-2">
                    <div class="col-md-2">Color</div>
                    <div class="col-md-10">@Html.TextBox("Background", "FFFFFF", new { disabled = "disabled", @readonly = "readonly" })</div>
                    <div class="error col-12">@Html.ValidationMessage("Background")</div>
                </div>
                <div class="row justify-content-center py-2">
                    <div class="text-center col-6"><input type="submit" id="submit" value="Create" class="btn btn-main" /></div>
                </div>
        }
        <div id="pickerDiv" class="row justify-content-center" style="display: none;">
            <div class="storage col-lg-6 col-12 mt-0">
                <canvas id="picker" class="w-100"></canvas>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="StorageTypeModal" tabindex="-1" role="dialog" aria-labelledby="StorageTypeModal" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content big-border">
            <div class="modal-header text-center d-block h5" id="StorageTypeLabel"></div>
            <div class="modal-body pt-0">
                <div class="row justify-content-center mx-3 text-center">
                    @foreach (var i in Model)
                    {
                        <div id="modal_@i.Id" class="col-md-3 col-5 btn btn-main m-1" data-dismiss="modal" onclick="removeConfirm(@i.Id);"></div>
                    }
                    <div class="col-12"></div>
                    <button data-dismiss="modal" class="btn btn-secondary col-md-4 col-6 m-1">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts
{
    <script>
        $("#uploadBtn").bind("click", function() {
            $("#upload").click();
        });

        $("#upload").change(function() {
            $("#UploadStatus").val($("#upload").val());
        });

        var storageId;
        function remove(id) {
            event.stopPropagation();
            $("#StorageTypeModal").modal();
            storageId = id;
            loadNames(id);
            $("#StorageTypeLabel").text("Choose the storage type which will replace "+$("#name_" + id).val());
        }

        function loadNames(id) {
            @foreach (var i in Model)
            {
                var id = i.Id;
                <text>
                    if (id != @id) {
                        $("#modal_@id").text($("#name_@id").val());
                        $("#modal_@id").show();
                    }
                    else $("#modal_@id").hide();
                </text>
            }
        }

        function removeConfirm(id) {
            $.ajax({
                url: '@Url.Action("RemoveType", "Storage")?fromId=' + storageId+"&toId="+id,
                success: function () {
                    location.reload();
                }
            });
        }

        $("body").click(function () {
            $("#storage").css("background-color", "#" + $("#Background").val());
        });

        function updateForm(id, name, color) {
            if (id !== 0) $("#submit").val("Update");
            else $("#submit").val("Create");
            $("#Name").val(name);
            $("#Id").val(id);
            $("#Background").val(color);
            $('#storage').css('backgroundColor', "#"+color);
        }

        $(function () {
            var bCanPreview = true;
            var canvas = document.getElementById('picker');
            var ctx = canvas.getContext('2d');
            ctx.fillStyle = "#000";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            var image = new Image();
            image.onload = function () {
                ctx.drawImage(image, 0, 0, image.width, canvas.height);
            }
            image.src = '@Url.Content("~/Content/ColorPicker.jpg")';
            $('#picker').mousemove(function (e) {
                if (bCanPreview) {
                    var canvasOffset = $(canvas).offset();
                    var canvasX = Math.floor(e.pageX - canvasOffset.left);
                    var canvasY = Math.floor(e.pageY - canvasOffset.top);
                    canvasX *= 300 / $("#picker").width();
                    canvasY *= 150 / $("#picker").height() ;
                    console.log(canvasY);
                    var imageData = ctx.getImageData(canvasX, canvasY, 1, 1);
                    var pixel = imageData.data;
                    var pixelColor = "rgb(" + pixel[0] + ", " + pixel[1] + ", " + pixel[2] + ")";
                    $('.preview').css('backgroundColor', pixelColor);
                    var dColor = pixel[2] + 256 * pixel[1] + 65536 * pixel[0];
                    $('#Background').val(dColor.toString(16).substr(-6).toUpperCase());
                }
            });
            $('#picker').click(function (e) { // click event handler
                bCanPreview = !bCanPreview;
            });
            $('#Background').click(function (e) { // preview click
                $('#pickerDiv').fadeToggle("fast", "linear");
                bCanPreview = true;
            });
        });
    </script>
}